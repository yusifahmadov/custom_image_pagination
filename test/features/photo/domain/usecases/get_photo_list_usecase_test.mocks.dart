// Mocks generated by Mockito 5.4.2 from annotations
// in imageproject/test/features/photo/domain/usecases/get_photo_list_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:imageproject/core/error/response.dart' as _i7;
import 'package:imageproject/features/photo/data/models/photo_url_model.dart'
    as _i3;
import 'package:imageproject/features/photo/data/models/user_model.dart' as _i4;
import 'package:imageproject/features/photo/domain/entities/photo.dart' as _i8;
import 'package:imageproject/features/photo/domain/repositories/photo_repository.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhotoUrlModel_1 extends _i1.SmartFake implements _i3.PhotoUrlModel {
  _FakePhotoUrlModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_2 extends _i1.SmartFake implements _i4.UserModel {
  _FakeUserModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoRepository extends _i1.Mock implements _i5.PhotoRepository {
  MockPhotoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.ResponseI, List<_i8.Photo>>> getPhotoList(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPhotoList,
          [page],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.ResponseI, List<_i8.Photo>>>.value(
                _FakeEither_0<_i7.ResponseI, List<_i8.Photo>>(
          this,
          Invocation.method(
            #getPhotoList,
            [page],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.ResponseI, List<_i8.Photo>>>);
  @override
  _i6.Future<_i2.Either<_i7.ResponseI, _i8.Photo>> getOnePhoto(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnePhoto,
          [id],
        ),
        returnValue: _i6.Future<_i2.Either<_i7.ResponseI, _i8.Photo>>.value(
            _FakeEither_0<_i7.ResponseI, _i8.Photo>(
          this,
          Invocation.method(
            #getOnePhoto,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.ResponseI, _i8.Photo>>);
}

/// A class which mocks [Photo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoto extends _i1.Mock implements _i8.Photo {
  MockPhoto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i3.PhotoUrlModel get urls => (super.noSuchMethod(
        Invocation.getter(#urls),
        returnValue: _FakePhotoUrlModel_1(
          this,
          Invocation.getter(#urls),
        ),
      ) as _i3.PhotoUrlModel);
  @override
  _i4.UserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUserModel_2(
          this,
          Invocation.getter(#user),
        ),
      ) as _i4.UserModel);
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
